// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Returns service status and database connectivity.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/payment/check/transaction": {
            "post": {
                "description": "Check if a transaction meets the payment requirements",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Check a transaction",
                "parameters": [
                    {
                        "description": "Check transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.CheckTxRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.CheckTxResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/payment.InvalidRequest"
                        }
                    },
                    "422": {
                        "description": "Invalid address format",
                        "schema": {
                            "$ref": "#/definitions/payment.InvalidAddress"
                        }
                    },
                    "503": {
                        "description": "failed to check transaction",
                        "schema": {
                            "$ref": "#/definitions/payment.FailedToFind"
                        }
                    }
                }
            }
        },
        "/payment/find/transaction": {
            "post": {
                "description": "Find the latest transaction for a given address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Find the latest transaction",
                "parameters": [
                    {
                        "description": "Check transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.FindTxRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.CheckTxResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/payment.InvalidRequest"
                        }
                    },
                    "422": {
                        "description": "Invalid address format",
                        "schema": {
                            "$ref": "#/definitions/payment.InvalidAddress"
                        }
                    },
                    "503": {
                        "description": "failed to find latest transaction",
                        "schema": {
                            "$ref": "#/definitions/payment.FailedToFind"
                        }
                    }
                }
            }
        },
        "/payment/webhook": {
            "post": {
                "description": "Set up a webhook to monitor payments to a specific address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Set up a payment webhook",
                "parameters": [
                    {
                        "description": "Webhook setup request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.WebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/payment.InvalidRequest"
                        }
                    },
                    "422": {
                        "description": "Invalid address format",
                        "schema": {
                            "$ref": "#/definitions/payment.InvalidAddress"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_application_payment.Status": {
            "type": "string",
            "enum": [
                "pending",
                "received",
                "completed",
                "timeout",
                "failed",
                "mismatch"
            ],
            "x-enum-varnames": [
                "Pending",
                "Received",
                "Completed",
                "Timeout",
                "Failed",
                "Mismatch"
            ]
        },
        "payment.CheckTxRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0xabc123..."
                },
                "currency": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/payment.CurrencyType"
                        }
                    ],
                    "example": "USDT"
                },
                "txid": {
                    "type": "string",
                    "example": "0xabc123..."
                }
            }
        },
        "payment.CheckTxResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/internal_application_payment.Status"
                }
            }
        },
        "payment.CurrencyType": {
            "type": "string",
            "enum": [
                "ETH",
                "USDT",
                "USDC"
            ],
            "x-enum-varnames": [
                "ETH",
                "USDT",
                "USDC"
            ]
        },
        "payment.FailedToFind": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "failed to find latest transaction"
                }
            }
        },
        "payment.FindTxRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "format": "hex",
                    "example": "0xabc123..."
                },
                "currency": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/payment.CurrencyType"
                        }
                    ],
                    "example": "USDT"
                }
            }
        },
        "payment.InvalidAddress": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid address format"
                }
            }
        },
        "payment.InvalidRequest": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "invalid request"
                }
            }
        },
        "payment.WebhookRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "callback_url": {
                    "type": "string"
                },
                "currency": {
                    "description": "Network     string ` + "`" + `json:\"network\"` + "`" + `",
                    "type": "string"
                },
                "timeout": {
                    "description": "Amount      string ` + "`" + `json:\"amount\"` + "`" + `",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Go-Blocker API",
	Description:      "This is the API documentation for the Go-Blocker service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
